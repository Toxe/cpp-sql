// generated by /opt/vcpkg/installed/x64-osx/scripts/sqlpp11-ddl2cpp ships.ddl ships Ships
#ifndef SHIPS_SHIPS_H
#define SHIPS_SHIPS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace Ships
{
  namespace ShipRoles_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Role
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "role";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T role;
            T& operator()() { return role; }
            const T& operator()() const { return role; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
  } // namespace ShipRoles_

  struct ShipRoles: sqlpp::table_t<ShipRoles,
               ShipRoles_::Id,
               ShipRoles_::Role>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ship_roles";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T shipRoles;
        T& operator()() { return shipRoles; }
        const T& operator()() const { return shipRoles; }
      };
    };
  };
  namespace Ships_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Length
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "length";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T length;
            T& operator()() { return length; }
            const T& operator()() const { return length; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Crew
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "crew";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T crew;
            T& operator()() { return crew; }
            const T& operator()() const { return crew; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Affiliation
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "affiliation";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T affiliation;
            T& operator()() { return affiliation; }
            const T& operator()() const { return affiliation; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Category
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "category";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T category;
            T& operator()() { return category; }
            const T& operator()() const { return category; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Manufacturer
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "manufacturer";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T manufacturer;
            T& operator()() { return manufacturer; }
            const T& operator()() const { return manufacturer; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Model
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "model";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T model;
            T& operator()() { return model; }
            const T& operator()() const { return model; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct ShipClass
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ship_class";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T shipClass;
            T& operator()() { return shipClass; }
            const T& operator()() const { return shipClass; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
  } // namespace Ships_

  struct Ships: sqlpp::table_t<Ships,
               Ships_::Id,
               Ships_::Length,
               Ships_::Crew,
               Ships_::Affiliation,
               Ships_::Category,
               Ships_::Manufacturer,
               Ships_::Model,
               Ships_::ShipClass>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ships";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ships;
        T& operator()() { return ships; }
        const T& operator()() const { return ships; }
      };
    };
  };
} // namespace Ships
#endif
